{"uid":"34815ad3c9d3121e","name":"test_score_invalid_name[name6-tom@gmail.com-99-Teacher]","fullName":"cases.test_score#test_score_invalid_name","historyId":"8a9c349a14e01163202e2e5c35f19c80","time":{"start":1714727187192,"stop":1714727187193,"duration":1},"status":"broken","statusMessage":"TypeError: Object of type set is not JSON serializable","statusTrace":"name = {1, 2}, email = 'tom@gmail.com', score = 99, role = 'Teacher'\n\n    @allure.step(\"Negative test cases: invalid name\")\n    @pytest.mark.parametrize(\"email,score,role\", [(\"tom@gmail.com\", 99, \"Teacher\")])\n    @pytest.mark.parametrize(\"name\", [\"\", None, 123, (1, 2), {\"key\": 2}, [1, 2], {1, 2}])\n    def test_score_invalid_name(name, email, score, role):\n        url = Constants.Base_URL\n        json = {\n            \"name\": name,\n            \"email\": email,\n            \"score\": score,\n            \"role\": role\n        }\n    \n>       resp = request(method=\"POST\", url=url, json=json)\n\ncases/test_score.py:154: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv/lib/python3.9/site-packages/requests/api.py:59: in request\n    return session.request(method=method, url=url, **kwargs)\nvenv/lib/python3.9/site-packages/requests/sessions.py:575: in request\n    prep = self.prepare_request(req)\nvenv/lib/python3.9/site-packages/requests/sessions.py:486: in prepare_request\n    p.prepare(\nvenv/lib/python3.9/site-packages/requests/models.py:371: in prepare\n    self.prepare_body(data, files, json)\nvenv/lib/python3.9/site-packages/requests/models.py:511: in prepare_body\n    body = complexjson.dumps(json, allow_nan=False)\n/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/json/__init__.py:234: in dumps\n    return cls(\n/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/json/encoder.py:199: in encode\n    chunks = self.iterencode(o, _one_shot=True)\n/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/json/encoder.py:257: in iterencode\n    return _iterencode(o, 0)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.encoder.JSONEncoder object at 0x10b4fd280>, o = {1, 2}\n\n    def default(self, o):\n        \"\"\"Implement this method in a subclass such that it returns\n        a serializable object for ``o``, or calls the base implementation\n        (to raise a ``TypeError``).\n    \n        For example, to support arbitrary iterators, you could\n        implement default like this::\n    \n            def default(self, o):\n                try:\n                    iterable = iter(o)\n                except TypeError:\n                    pass\n                else:\n                    return list(iterable)\n                # Let the base class default method raise the TypeError\n                return JSONEncoder.default(self, o)\n    \n        \"\"\"\n>       raise TypeError(f'Object of type {o.__class__.__name__} '\n                        f'is not JSON serializable')\nE       TypeError: Object of type set is not JSON serializable\n\n/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/json/encoder.py:179: TypeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"TypeError: Object of type set is not JSON serializable","statusTrace":"name = {1, 2}, email = 'tom@gmail.com', score = 99, role = 'Teacher'\n\n    @allure.step(\"Negative test cases: invalid name\")\n    @pytest.mark.parametrize(\"email,score,role\", [(\"tom@gmail.com\", 99, \"Teacher\")])\n    @pytest.mark.parametrize(\"name\", [\"\", None, 123, (1, 2), {\"key\": 2}, [1, 2], {1, 2}])\n    def test_score_invalid_name(name, email, score, role):\n        url = Constants.Base_URL\n        json = {\n            \"name\": name,\n            \"email\": email,\n            \"score\": score,\n            \"role\": role\n        }\n    \n>       resp = request(method=\"POST\", url=url, json=json)\n\ncases/test_score.py:154: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv/lib/python3.9/site-packages/requests/api.py:59: in request\n    return session.request(method=method, url=url, **kwargs)\nvenv/lib/python3.9/site-packages/requests/sessions.py:575: in request\n    prep = self.prepare_request(req)\nvenv/lib/python3.9/site-packages/requests/sessions.py:486: in prepare_request\n    p.prepare(\nvenv/lib/python3.9/site-packages/requests/models.py:371: in prepare\n    self.prepare_body(data, files, json)\nvenv/lib/python3.9/site-packages/requests/models.py:511: in prepare_body\n    body = complexjson.dumps(json, allow_nan=False)\n/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/json/__init__.py:234: in dumps\n    return cls(\n/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/json/encoder.py:199: in encode\n    chunks = self.iterencode(o, _one_shot=True)\n/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/json/encoder.py:257: in iterencode\n    return _iterencode(o, 0)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.encoder.JSONEncoder object at 0x10b4fd280>, o = {1, 2}\n\n    def default(self, o):\n        \"\"\"Implement this method in a subclass such that it returns\n        a serializable object for ``o``, or calls the base implementation\n        (to raise a ``TypeError``).\n    \n        For example, to support arbitrary iterators, you could\n        implement default like this::\n    \n            def default(self, o):\n                try:\n                    iterable = iter(o)\n                except TypeError:\n                    pass\n                else:\n                    return list(iterable)\n                # Let the base class default method raise the TypeError\n                return JSONEncoder.default(self, o)\n    \n        \"\"\"\n>       raise TypeError(f'Object of type {o.__class__.__name__} '\n                        f'is not JSON serializable')\nE       TypeError: Object of type set is not JSON serializable\n\n/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/json/encoder.py:179: TypeError","steps":[{"name":"Negative test cases: invalid name","time":{"start":1714727187192,"stop":1714727187192,"duration":0},"status":"broken","statusMessage":"TypeError: Object of type set is not JSON serializable\n","statusTrace":"  File \"/Users/marongyao/PycharmProjects/score_system/venv/lib/python3.9/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/Users/marongyao/PycharmProjects/score_system/cases/test_score.py\", line 154, in test_score_invalid_name\n    resp = request(method=\"POST\", url=url, json=json)\n  File \"/Users/marongyao/PycharmProjects/score_system/venv/lib/python3.9/site-packages/requests/api.py\", line 59, in request\n    return session.request(method=method, url=url, **kwargs)\n  File \"/Users/marongyao/PycharmProjects/score_system/venv/lib/python3.9/site-packages/requests/sessions.py\", line 575, in request\n    prep = self.prepare_request(req)\n  File \"/Users/marongyao/PycharmProjects/score_system/venv/lib/python3.9/site-packages/requests/sessions.py\", line 486, in prepare_request\n    p.prepare(\n  File \"/Users/marongyao/PycharmProjects/score_system/venv/lib/python3.9/site-packages/requests/models.py\", line 371, in prepare\n    self.prepare_body(data, files, json)\n  File \"/Users/marongyao/PycharmProjects/score_system/venv/lib/python3.9/site-packages/requests/models.py\", line 511, in prepare_body\n    body = complexjson.dumps(json, allow_nan=False)\n  File \"/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/json/__init__.py\", line 234, in dumps\n    return cls(\n  File \"/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/json/encoder.py\", line 199, in encode\n    chunks = self.iterencode(o, _one_shot=True)\n  File \"/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/json/encoder.py\", line 257, in iterencode\n    return _iterencode(o, 0)\n  File \"/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/json/encoder.py\", line 179, in default\n    raise TypeError(f'Object of type {o.__class__.__name__} '\n","steps":[],"attachments":[],"parameters":[{"name":"name","value":"{1, 2}"},{"name":"email","value":"'tom@gmail.com'"},{"name":"score","value":"99"},{"name":"role","value":"'Teacher'"}],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":0,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":1,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":0,"attachmentStep":false},"afterStages":[],"labels":[{"name":"parentSuite","value":"cases"},{"name":"suite","value":"test_score"},{"name":"host","value":"MaRongyaos-MBP"},{"name":"thread","value":"15820-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"cases.test_score"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"email","value":"'tom@gmail.com'"},{"name":"name","value":"{1, 2}"},{"name":"role","value":"'Teacher'"},{"name":"score","value":"99"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"34815ad3c9d3121e.json","parameterValues":["'tom@gmail.com'","{1, 2}","'Teacher'","99"]}